/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Tensor_types.h"

#include "Tensor_types.tcc"

#include <algorithm>

namespace thpp {

ThriftTensorDataType _kThriftTensorDataTypeValues[] = {
  ThriftTensorDataType::BYTE,
  ThriftTensorDataType::INT32,
  ThriftTensorDataType::INT64,
  ThriftTensorDataType::FLOAT,
  ThriftTensorDataType::DOUBLE
};

const char* _kThriftTensorDataTypeNames[] = {
  "BYTE",
  "INT32",
  "INT64",
  "FLOAT",
  "DOUBLE"
};

const std::map<ThriftTensorDataType, const char*> _ThriftTensorDataType_VALUES_TO_NAMES(apache::thrift::TEnumIterator<ThriftTensorDataType>(5, _kThriftTensorDataTypeValues, _kThriftTensorDataTypeNames), apache::thrift::TEnumIterator<ThriftTensorDataType>(-1, nullptr, nullptr));
const std::map<const char*, ThriftTensorDataType, apache::thrift::ltstr> _ThriftTensorDataType_NAMES_TO_VALUES(apache::thrift::TEnumInverseIterator<ThriftTensorDataType>(5, _kThriftTensorDataTypeValues, _kThriftTensorDataTypeNames), apache::thrift::TEnumInverseIterator<ThriftTensorDataType>(-1, nullptr, nullptr));

} // thpp
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::thpp::ThriftTensorDataType>::findName( ::thpp::ThriftTensorDataType value) {
  return findName( ::thpp::_ThriftTensorDataType_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::thpp::ThriftTensorDataType>::findValue(const char* name,  ::thpp::ThriftTensorDataType* outValue) {
  return findValue( ::thpp::_ThriftTensorDataType_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace thpp {

ThriftTensorEndianness _kThriftTensorEndiannessValues[] = {
  ThriftTensorEndianness::LITTLE,
  ThriftTensorEndianness::BIG,
  ThriftTensorEndianness::NATIVE
};

const char* _kThriftTensorEndiannessNames[] = {
  "LITTLE",
  "BIG",
  "NATIVE"
};

const std::map<ThriftTensorEndianness, const char*> _ThriftTensorEndianness_VALUES_TO_NAMES(apache::thrift::TEnumIterator<ThriftTensorEndianness>(3, _kThriftTensorEndiannessValues, _kThriftTensorEndiannessNames), apache::thrift::TEnumIterator<ThriftTensorEndianness>(-1, nullptr, nullptr));
const std::map<const char*, ThriftTensorEndianness, apache::thrift::ltstr> _ThriftTensorEndianness_NAMES_TO_VALUES(apache::thrift::TEnumInverseIterator<ThriftTensorEndianness>(3, _kThriftTensorEndiannessValues, _kThriftTensorEndiannessNames), apache::thrift::TEnumInverseIterator<ThriftTensorEndianness>(-1, nullptr, nullptr));

} // thpp
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::thpp::ThriftTensorEndianness>::findName( ::thpp::ThriftTensorEndianness value) {
  return findName( ::thpp::_ThriftTensorEndianness_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::thpp::ThriftTensorEndianness>::findValue(const char* name,  ::thpp::ThriftTensorEndianness* outValue) {
  return findValue( ::thpp::_ThriftTensorEndianness_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace thpp {

template uint32_t ThriftTensor::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftTensor::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftTensor::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftTensor::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftTensor::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftTensor::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftTensor::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftTensor::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftTensor::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ThriftTensor::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ThriftTensor::__clear() {
  dataType =  ::thpp::ThriftTensorDataType();
  endianness =  ::thpp::ThriftTensorEndianness();
  sizes.clear();
  data = folly::IOBuf();
  __isset.__clear();
}

bool ThriftTensor::operator==(const ThriftTensor& rhs) const {
  if (!((dataType == rhs.dataType))) {
    return false;
  }
  if (!((endianness == rhs.endianness))) {
    return false;
  }
  if (!((sizes == rhs.sizes))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(data, rhs.data))) {
    return false;
  }
  return true;
}

void swap(ThriftTensor& a, ThriftTensor& b) {
  using ::std::swap;
  swap(a.dataType, b.dataType);
  swap(a.endianness, b.endianness);
  swap(a.sizes, b.sizes);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

} // thpp
namespace apache { namespace thrift {

}} // apache::thrift
namespace thpp {

template uint32_t ThriftStorage::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftStorage::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftStorage::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftStorage::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftStorage::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftStorage::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftStorage::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftStorage::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftStorage::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t ThriftStorage::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void ThriftStorage::__clear() {
  dataType =  ::thpp::ThriftTensorDataType();
  endianness =  ::thpp::ThriftTensorEndianness();
  data = folly::IOBuf();
  __isset.__clear();
}

bool ThriftStorage::operator==(const ThriftStorage& rhs) const {
  if (!((dataType == rhs.dataType))) {
    return false;
  }
  if (!((endianness == rhs.endianness))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(data, rhs.data))) {
    return false;
  }
  return true;
}

void swap(ThriftStorage& a, ThriftStorage& b) {
  using ::std::swap;
  swap(a.dataType, b.dataType);
  swap(a.endianness, b.endianness);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

} // thpp
namespace apache { namespace thrift {

}} // apache::thrift
namespace thpp {

} // thpp