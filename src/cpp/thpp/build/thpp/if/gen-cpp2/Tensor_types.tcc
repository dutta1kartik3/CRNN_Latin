/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "Tensor_types.h"

#include <thrift/lib/cpp/TApplicationException.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/DebugProtocol.h>
#include <thrift/lib/cpp2/protocol/VirtualProtocol.h>

namespace thpp {

} // thpp
namespace apache { namespace thrift {

}} // apache::thrift
namespace thpp {

} // thpp
namespace apache { namespace thrift {

}} // apache::thrift
namespace thpp {

template <class Protocol_>
uint32_t ThriftTensor::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_dataType = false;
  bool isset_endianness = false;
  bool isset_sizes = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "dataType") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "endianness") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "sizes") {
        fid = 3;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "data") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->dataType = ( ::thpp::ThriftTensorDataType)ecast0;
          isset_dataType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->endianness = ( ::thpp::ThriftTensorEndianness)ecast1;
          isset_endianness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->sizes.clear();
          uint32_t _size2;
          apache::thrift::protocol::TType _etype5;
          xfer += iprot->readListBegin(_etype5, _size2);
          uint32_t _i6;
          if (_size2 == std::numeric_limits<uint32_t>::max()) {
            for (_i6 = 0; iprot->peekList(); _i6++) {
              this->sizes.resize(_i6 + 1);
              xfer += iprot->readI64(this->sizes[_i6]);
            }
          }
          else {
            this->sizes.resize(_size2);
            for (_i6 = 0; _i6 < _size2; ++_i6) {
              xfer += iprot->readI64(this->sizes[_i6]);
            }
          }
          xfer += iprot->readListEnd();
          isset_sizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_dataType) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'dataType' was not foundin serialized data! Struct: ThriftTensor");
  }
  if (!isset_endianness) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'endianness' was not foundin serialized data! Struct: ThriftTensor");
  }
  if (!isset_sizes) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'sizes' was not foundin serialized data! Struct: ThriftTensor");
  }
  return xfer;
}

template <class Protocol_>
uint32_t ThriftTensor::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftTensor");
  xfer += prot_->serializedFieldSize("dataType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->dataType);
  xfer += prot_->serializedFieldSize("endianness", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->endianness);
  xfer += prot_->serializedFieldSize("sizes", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->sizes.size());
  for (auto _iter7 = this->sizes.begin(); _iter7 != this->sizes.end(); ++_iter7) {
    xfer += prot_->serializedSizeI64((*_iter7));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftTensor::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftTensor");
  xfer += prot_->serializedFieldSize("dataType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->dataType);
  xfer += prot_->serializedFieldSize("endianness", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->endianness);
  xfer += prot_->serializedFieldSize("sizes", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->sizes.size());
  for (auto _iter8 = this->sizes.begin(); _iter8 != this->sizes.end(); ++_iter8) {
    xfer += prot_->serializedSizeI64((*_iter8));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftTensor::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftTensor");
  xfer += prot_->writeFieldBegin("dataType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->dataType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("endianness", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32((int32_t)this->endianness);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sizes", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, this->sizes.size());
  for (auto _iter9 = this->sizes.begin(); _iter9 != this->sizes.end(); ++_iter9) {
    xfer += prot_->writeI64((*_iter9));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->data);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // thpp
namespace apache { namespace thrift {

}} // apache::thrift
namespace thpp {

template <class Protocol_>
uint32_t ThriftStorage::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_dataType = false;
  bool isset_endianness = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "dataType") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "endianness") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "data") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->dataType = ( ::thpp::ThriftTensorDataType)ecast10;
          isset_dataType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->endianness = ( ::thpp::ThriftTensorEndianness)ecast11;
          isset_endianness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_dataType) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'dataType' was not foundin serialized data! Struct: ThriftStorage");
  }
  if (!isset_endianness) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'endianness' was not foundin serialized data! Struct: ThriftStorage");
  }
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStorage::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftStorage");
  xfer += prot_->serializedFieldSize("dataType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->dataType);
  xfer += prot_->serializedFieldSize("endianness", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->endianness);
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStorage::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftStorage");
  xfer += prot_->serializedFieldSize("dataType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->dataType);
  xfer += prot_->serializedFieldSize("endianness", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->endianness);
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStorage::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftStorage");
  xfer += prot_->writeFieldBegin("dataType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->dataType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("endianness", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32((int32_t)this->endianness);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->data);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // thpp
namespace apache { namespace thrift {

}} // apache::thrift
namespace thpp {

} // thpp